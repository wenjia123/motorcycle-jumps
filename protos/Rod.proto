#VRML_SIM R2022a utf8
# template language: javascript
PROTO Rod[
  field SFString solidName "Rod"
  field SFString Motorname "motor"
  field SFVec3f   Point1      0 0.35 0.1
  field SFVec3f   Point2      0 0.25 0.2
  field SFFloat     R           0.01
  field SFFloat     N           10
  field SFFloat     Mass           10
]
{
  #overall javascript calculations for proto-wide definitions
  %<
  //import webots geometry library so we can interpret fields
  import * as wbgeometry from 'wbgeometry.js';

  console.log()

  //strings for naming convention
  let SolidName = fields.solidName.value;

  let Point1 = fields.Point1.value;
  let Point2 = fields.Point2.value;

  let R = fields.R.value;
  let N = fields.N.value;
  let Mass = fields.Mass.value;

function rod(x1,y1,z1,x2,y2,z2, R, N ){
  this.x1 = x1;
  this.x2 = x2;
  this.y1 = y1;
  this.y2 = y2;
  this.z1 = z1;
  this.z2 = z2;
  this.R = R;
  this.N = N;
  this.num_slices = 2;
  this.vertices = []//this will hold all xyz points of the road
  this.coordIndices = []//this is a list of triangles defined by the indices in the 'vertices' list.

  this.orthogonalVector = function(v) {
    // Check for a zero vector
    if (v.x === 0 && v.y === 0 && v.z === 0) {
      throw new Error("Cannot find an orthogonal vector to a zero vector");
    }
    // Find a non-zero component of v
    let nonZeroComponent = v.x !== 0 ? "x" : v.y !== 0 ? "y" : "z";
    // Construct an orthogonal vector based on the non-zero component
    switch (nonZeroComponent) {
      case "x":
        // console.log("x nonzero")
        if(v.y!==0 && v.z!==0){
          return { x: 0, y: v.z, z: -v.y };
        }
        else{
          if(v.y===0){
            return {x: 0, y: v.x, z: 0};
          }
          else{
            return {x: 0, y: 0, z: v.x};
          }
        }
      case "y":
        // console.log("y nonzero")
        if(v.x!==0 && v.z!== 0){
          return { x: -v.z, y: 0, z: v.x };
        }
        else{
          if(v.x===0){
            return {x: v.y, y: 0, z: 0};
          }
          else{
            return {x: 0, y: 0, z: v.y};
          }
        }
      case "z":
        // console.log("z nonzero")
        if(v.y!==0 && v.x !== 0){
          return { x: v.y, y: -v.x, z: 0 };
        }
        else{
          if(v.x===0){
            return {x: v.z, y: 0, z: 0};
          }
          else{
            return {x: 0, y: v.z, z: 0};
          }
        }
    }
  }
  //this function creates all slices in our rod
  this.createVertices = function(){
    let lengthvec = Math.sqrt(Math.pow(this.x2-this.x1,2)+Math.pow(this.y2-this.y1,2)+Math.pow(this.z2-this.z1,2));
    let zvec = { x: (this.x2-this.x1)/lengthvec, y: (this.y2-this.y1)/lengthvec, z: (this.z2-this.z1)/lengthvec };
    // console.log("length of local z vec: ",lengthvec)
    let yvec = this.orthogonalVector(zvec);
    let Ly = Math.sqrt(Math.pow(yvec.x,2)+Math.pow(yvec.y,2)+Math.pow(yvec.z,2));
    // console.log("length of local y vec: ",Ly)
    yvec.x = yvec.x/Ly;
    yvec.y = yvec.y/Ly;
    yvec.z = yvec.z/Ly;

    let xvec = {x: yvec.y*zvec.z - yvec.z*zvec.y, y: yvec.z*zvec.x-yvec.x*zvec.z , z: yvec.x*zvec.y-yvec.y*zvec.x};
    let Lx = Math.sqrt(Math.pow(xvec.x,2)+Math.pow(xvec.y,2)+Math.pow(xvec.z,2));
    // console.log("length of local x vec: ",Lx)
    xvec.x = xvec.x/Lx;
    xvec.y = xvec.y/Lx;
    xvec.z = xvec.z/Lx;
    // console.log("xvec: ",xvec)
    // console.log("yvec: ",yvec)
    // console.log("zvec: ",zvec)
    // console.log("length: ",lengthvec)
    //draw cross-section 1
    let myslice = [];
    for (let t = 0;t<2*3.14;t=t+6.28/N){
      let xlocal = this.R*Math.cos(t);
      let ylocal = this.R*Math.sin(t);
      let zlocal = 0;
      let myx = xlocal*xvec.x+ylocal*yvec.x+zlocal*zvec.x + this.x1
      let myy = xlocal*xvec.y+ylocal*yvec.y+zlocal*zvec.y + this.y1
      let myz = xlocal*xvec.z+ylocal*yvec.z+zlocal*zvec.z + this.z1
      // console.log("point: ",myx,myy,myz);
      myslice = myslice.concat([[myx,myy,myz]]);
      // console.log(this.vertices);
    }
    this.vertices = this.vertices.concat(myslice);
    myslice = [];
    for (let t = 0;t<2*3.14;t=t+6.28/N){
      let xlocal = this.R*Math.cos(t);
      let ylocal = this.R*Math.sin(t);
      let zlocal = lengthvec;
      let myx = xlocal*xvec.x+ylocal*yvec.x+zlocal*zvec.x + this.x1
      let myy = xlocal*xvec.y+ylocal*yvec.y+zlocal*zvec.y + this.y1
      let myz = xlocal*xvec.z+ylocal*yvec.z+zlocal*zvec.z + this.z1
      // console.log("point: ",myx,myy,myz);
      myslice = myslice.concat([[myx,myy,myz]]);
      // console.log(this.vertices);
    }
    this.vertices = this.vertices.concat(myslice);
    this.vertices = this.vertices.concat([[this.x1,this.y1,this.z1]])
    this.vertices = this.vertices.concat([[this.x2,this.y2,this.z2]])
  }

  this.createTriangles = function(){
    //first create vertices of our road using the function above.
    this.createVertices();
    //now, we have to define a list of triangles, defined by sets of three indices in our vertex array that are connected. like [0,1,2] would mean that vertices 0, 1, and 2 form a triangle.

    //outer for-loop that moves through each slice.
    for(let slice_ind = 0;slice_ind<(this.num_slices-1);slice_ind++){
      //inner for-loop that moves through each triangle in the slice.
      //we will always make triangles from the current slice TO the next.
      //for any point, triangle 1 is defined by 2 points on next slice, and this slice.
      //for any point, triangle 2 is defined by this point, the point to the right, and then one point on the next slice.

      //first, the for-loop defining 'triangle 1' for each point (except the last one, which is only a member of triangle 2).
      for(let point_ind = 0;point_ind<(this.N-1);point_ind++){
        //offset the index based on which slice we're working on. on second slice (index 1), the total number of points in one slice must be added to get to the 0'th index for this slice.
        let offsetThis = slice_ind*(this.N)
        //same thing; find an offset that gets us to the same point in the NEXT slice
        let offsetNext = (slice_ind+1)*(this.N)
        //this triangle is me, me on the next slice, and neighbor on next slice.
        //have to be defined in CCW order!
        //let tri = [offsetThis+point_ind,offsetNext+point_ind+1,offsetNext+point_ind]
        let tri = [offsetNext+point_ind+1,offsetNext+point_ind,offsetThis+point_ind]
        this.coordIndices.push(tri)

      //now repeat this, but use the pattern: me, my neighbor, and my neighbor on the NEXT slice. This gets us full coverage.
        //offset the index based on which slice we're working on. on second slice (index 1), the total number of points in one slice must be added to get to the 0'th index for this slice.
        offsetThis = slice_ind*(this.N)
        //same thing; find an offset that gets us to the same point in the NEXT slice
        offsetNext = (slice_ind+1)*(this.N)
        //this triangle is me, me on the next slice, and neighbor on next slice.
        //have to be defined in CCW order!
        tri = [offsetThis+point_ind,offsetThis+point_ind+1,offsetNext+point_ind+1]
        //tri = [offsetThis+point_ind+1,offsetThis+point_ind,offsetNext+point_ind+1]
        this.coordIndices.push(tri)
      }
      //add last two triangles to close the loop
      let tri = [this.N-1,0,2*(this.N)-1];
      this.coordIndices.push(tri);
      tri = [this.N,2*(this.N)-1,0];
      this.coordIndices.push(tri);
    }
    //within-slice triangles:
    for(let ind = 0; ind<(this.N-1);ind=ind+1){
      let tri1 = [this.N*2,ind+1,ind]
      this.coordIndices.push(tri1);
    }
    let tri1 = [N-1,this.N*2,0]
    this.coordIndices.push(tri1)

    for(let ind = 0; ind<(this.N-1);ind=ind+1){
      let tri2 = [(this.N+ind)+1,this.N*2+1,(this.N+ind)]
      this.coordIndices.push(tri2);
    }
    //let tri2 = [this.N*2+1,2*this.N-1,this.N];
    this.coordIndices.push([this.N,2*this.N-1,this.N*2+1]);
    //this.coordIndices.push(tri1)

  }
  console.log("FINISHED CREATING TRIANGLES")

}
var MyRod = new rod(Point1.x, Point1.y,Point1.z,Point2.x,Point2.y,Point2.z,R,N);
MyRod.createTriangles();

 >%

 DEF %<=SolidName>% Solid{ #this solid is the rod solid
   children[
   DEF rod_shape Shape {
   geometry IndexedFaceSet {
   coord Coordinate {
       point [
          %< for (let i = 0; i < MyRod.vertices.length; ++i) { >%
          %<= MyRod.vertices[i][0] >% %<= MyRod.vertices[i][1] >% %<= MyRod.vertices[i][2] >%
          %< } >%
      ]
  }
  coordIndex [
      %<for (let i = 0; i < MyRod.coordIndices.length-1; i=i+1) { >%
      %<= MyRod.coordIndices[i][0] >% %<= MyRod.coordIndices[i][1] >% %<= MyRod.coordIndices[i][2] >% -1
      #%<= MyRod.coordIndices[i+1][0] >% %<= MyRod.coordIndices[i+1][1] >% %<= MyRod.coordIndices[i+1][2] >% -1
      %<}>%
  ]
  }
  }
  ]
  boundingObject USE rod_shape
  physics Physics {
    mass IS Mass
  }
  }#end of Solid
}#end of Proto
